<?php

/**
 * BaseFinancialTransaction
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $type
 * @property integer $payment_id
 * @property enum $currency
 * @property decimal $requested_amount
 * @property decimal $processed_amount
 * @property integer $state
 * @property string $response_code
 * @property string $reason_code
 * @property Payment $Payment
 * 
 * @method integer              getId()               Returns the current record's "id" value
 * @method string               getType()             Returns the current record's "type" value
 * @method integer              getPaymentId()        Returns the current record's "payment_id" value
 * @method enum                 getCurrency()         Returns the current record's "currency" value
 * @method decimal              getRequestedAmount()  Returns the current record's "requested_amount" value
 * @method decimal              getProcessedAmount()  Returns the current record's "processed_amount" value
 * @method integer              getState()            Returns the current record's "state" value
 * @method string               getResponseCode()     Returns the current record's "response_code" value
 * @method string               getReasonCode()       Returns the current record's "reason_code" value
 * @method Payment              getPayment()          Returns the current record's "Payment" value
 * @method FinancialTransaction setId()               Sets the current record's "id" value
 * @method FinancialTransaction setType()             Sets the current record's "type" value
 * @method FinancialTransaction setPaymentId()        Sets the current record's "payment_id" value
 * @method FinancialTransaction setCurrency()         Sets the current record's "currency" value
 * @method FinancialTransaction setRequestedAmount()  Sets the current record's "requested_amount" value
 * @method FinancialTransaction setProcessedAmount()  Sets the current record's "processed_amount" value
 * @method FinancialTransaction setState()            Sets the current record's "state" value
 * @method FinancialTransaction setResponseCode()     Sets the current record's "response_code" value
 * @method FinancialTransaction setReasonCode()       Sets the current record's "reason_code" value
 * @method FinancialTransaction setPayment()          Sets the current record's "Payment" value
 * 
 * @package    up2green
 * @subpackage model
 * @author     ClÃ©ment Gautier
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseFinancialTransaction extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('financial_transactions');
        $this->hasColumn('id', 'integer', 11, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             'unsigned' => true,
             'length' => 11,
             ));
        $this->hasColumn('type', 'string', 25, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 25,
             ));
        $this->hasColumn('payment_id', 'integer', 11, array(
             'type' => 'integer',
             'unsigned' => true,
             'notnull' => true,
             'length' => 11,
             ));
        $this->hasColumn('currency', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'EUR',
              1 => 'USD',
              2 => 'JPY',
              3 => 'BGN',
              4 => 'CZK',
              5 => 'DKK',
              6 => 'EEK',
              7 => 'GBP',
              8 => 'HUF',
              9 => 'LTL',
              10 => 'LVL',
              11 => 'PLN',
              12 => 'RON',
              13 => 'SEK',
              14 => 'CHF',
              15 => 'NOK',
              16 => 'HRK',
              17 => 'RUB',
              18 => 'TRY',
              19 => 'AUD',
              20 => 'BRL',
              21 => 'CAD',
              22 => 'CNY',
              23 => 'HKD',
              24 => 'IDR',
              25 => 'INR',
              26 => 'KRW',
              27 => 'MXN',
              28 => 'MYR',
              29 => 'NZD',
              30 => 'PHP',
              31 => 'SGD',
              32 => 'THB',
              33 => 'ZAR',
             ),
             'default' => 'EUR',
             'comment' => 'This might be different from the currency of the payment; by default, both are equal.',
             ));
        $this->hasColumn('requested_amount', 'decimal', null, array(
             'type' => 'decimal',
             'scale' => 5,
             ));
        $this->hasColumn('processed_amount', 'decimal', null, array(
             'type' => 'decimal',
             'scale' => 5,
             ));
        $this->hasColumn('state', 'integer', 1, array(
             'type' => 'integer',
             'notnull' => true,
             'unsigned' => true,
             'default' => 1,
             'length' => 1,
             ));
        $this->hasColumn('response_code', 'string', 255, array(
             'type' => 'string',
             'notnull' => false,
             'comment' => 'Primary error code that is used to determine whether a transaction was successful or not.',
             'length' => 255,
             ));
        $this->hasColumn('reason_code', 'string', 255, array(
             'type' => 'string',
             'notnull' => false,
             'comment' => 'Secondary error code that is used to determine what exactly went wrong if anything.',
             'length' => 255,
             ));

        $this->option('type', 'InnoDB');
        $this->option('charset', 'utf8');
        $this->option('collate', 'utf8_unicode_ci');
        $this->option('symfony', array(
             'form' => false,
             'filter' => false,
             ));

        $this->setSubClasses(array(
             'FinancialApproveTransaction' => 
             array(
              'type' => 'approve',
             ),
             'FinancialDepositTransaction' => 
             array(
              'type' => 'deposit',
             ),
             'FinancialReverseApprovalTransaction' => 
             array(
              'type' => 'reverseApproval',
             ),
             'FinancialReverseDepositTransaction' => 
             array(
              'type' => 'reverseDeposit',
             ),
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Payment', array(
             'local' => 'payment_id',
             'foreign' => 'id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}