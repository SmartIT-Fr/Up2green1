<?php

/**
 * BasePaymentListener
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $payment_id
 * @property string $listener_id
 * @property string $listener_type
 * @property Payment $Payment
 * 
 * @method integer         getPaymentId()     Returns the current record's "payment_id" value
 * @method string          getListenerId()    Returns the current record's "listener_id" value
 * @method string          getListenerType()  Returns the current record's "listener_type" value
 * @method Payment         getPayment()       Returns the current record's "Payment" value
 * @method PaymentListener setPaymentId()     Sets the current record's "payment_id" value
 * @method PaymentListener setListenerId()    Sets the current record's "listener_id" value
 * @method PaymentListener setListenerType()  Sets the current record's "listener_type" value
 * @method PaymentListener setPayment()       Sets the current record's "Payment" value
 * 
 * @package    up2green
 * @subpackage model
 * @author     ClÃ©ment Gautier
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BasePaymentListener extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('payment_listeners');
        $this->hasColumn('payment_id', 'integer', 11, array(
             'type' => 'integer',
             'unsigned' => true,
             'primary' => true,
             'autoincrement' => false,
             'length' => 11,
             ));
        $this->hasColumn('listener_id', 'string', 115, array(
             'type' => 'string',
             'primary' => true,
             'length' => 115,
             ));
        $this->hasColumn('listener_type', 'string', 115, array(
             'type' => 'string',
             'primary' => true,
             'length' => 115,
             ));

        $this->option('comment', 'This holds the listeners that are registered on specific payments.');
        $this->option('type', 'InnoDB');
        $this->option('charset', 'utf8');
        $this->option('collate', 'utf8_unicode_ci');
        $this->option('symfony', array(
             'form' => false,
             'filter' => false,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Payment', array(
             'local' => 'payment_id',
             'foreign' => 'id'));
    }
}