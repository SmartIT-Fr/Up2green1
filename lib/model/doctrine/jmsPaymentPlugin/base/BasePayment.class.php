<?php

/**
 * BasePayment
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property decimal $target_amount
 * @property decimal $approved_amount
 * @property decimal $approving_amount
 * @property decimal $deposited_amount
 * @property decimal $depositing_amount
 * @property enum $currency
 * @property integer $state
 * @property Doctrine_Collection $Listeners
 * @property Doctrine_Collection $Transactions
 * @property PaymentData $DataContainer
 * 
 * @method integer             getId()                Returns the current record's "id" value
 * @method decimal             getTargetAmount()      Returns the current record's "target_amount" value
 * @method decimal             getApprovedAmount()    Returns the current record's "approved_amount" value
 * @method decimal             getApprovingAmount()   Returns the current record's "approving_amount" value
 * @method decimal             getDepositedAmount()   Returns the current record's "deposited_amount" value
 * @method decimal             getDepositingAmount()  Returns the current record's "depositing_amount" value
 * @method enum                getCurrency()          Returns the current record's "currency" value
 * @method integer             getState()             Returns the current record's "state" value
 * @method Doctrine_Collection getListeners()         Returns the current record's "Listeners" collection
 * @method Doctrine_Collection getTransactions()      Returns the current record's "Transactions" collection
 * @method PaymentData         getDataContainer()     Returns the current record's "DataContainer" value
 * @method Payment             setId()                Sets the current record's "id" value
 * @method Payment             setTargetAmount()      Sets the current record's "target_amount" value
 * @method Payment             setApprovedAmount()    Sets the current record's "approved_amount" value
 * @method Payment             setApprovingAmount()   Sets the current record's "approving_amount" value
 * @method Payment             setDepositedAmount()   Sets the current record's "deposited_amount" value
 * @method Payment             setDepositingAmount()  Sets the current record's "depositing_amount" value
 * @method Payment             setCurrency()          Sets the current record's "currency" value
 * @method Payment             setState()             Sets the current record's "state" value
 * @method Payment             setListeners()         Sets the current record's "Listeners" collection
 * @method Payment             setTransactions()      Sets the current record's "Transactions" collection
 * @method Payment             setDataContainer()     Sets the current record's "DataContainer" value
 * 
 * @package    up2green
 * @subpackage model
 * @author     ClÃ©ment Gautier
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BasePayment extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('payments');
        $this->hasColumn('id', 'integer', 11, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             'unsigned' => true,
             'length' => 11,
             ));
        $this->hasColumn('target_amount', 'decimal', null, array(
             'comment' => 'The requested target amount for this Payment.',
             'type' => 'decimal',
             'scale' => 5,
             'notnull' => true,
             ));
        $this->hasColumn('approved_amount', 'decimal', null, array(
             'type' => 'decimal',
             'scale' => 5,
             'notnull' => true,
             ));
        $this->hasColumn('approving_amount', 'decimal', null, array(
             'type' => 'decimal',
             'scale' => 5,
             'notnull' => true,
             ));
        $this->hasColumn('deposited_amount', 'decimal', null, array(
             'type' => 'decimal',
             'scale' => 5,
             'notnull' => true,
             ));
        $this->hasColumn('depositing_amount', 'decimal', null, array(
             'type' => 'decimal',
             'scale' => 5,
             'notnull' => true,
             ));
        $this->hasColumn('currency', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'EUR',
              1 => 'USD',
              2 => 'JPY',
              3 => 'BGN',
              4 => 'CZK',
              5 => 'DKK',
              6 => 'EEK',
              7 => 'GBP',
              8 => 'HUF',
              9 => 'LTL',
              10 => 'LVL',
              11 => 'PLN',
              12 => 'RON',
              13 => 'SEK',
              14 => 'CHF',
              15 => 'NOK',
              16 => 'HRK',
              17 => 'RUB',
              18 => 'TRY',
              19 => 'AUD',
              20 => 'BRL',
              21 => 'CAD',
              22 => 'CNY',
              23 => 'HKD',
              24 => 'IDR',
              25 => 'INR',
              26 => 'KRW',
              27 => 'MXN',
              28 => 'MYR',
              29 => 'NZD',
              30 => 'PHP',
              31 => 'SGD',
              32 => 'THB',
              33 => 'ZAR',
             ),
             'default' => 'EUR',
             'notnull' => true,
             ));
        $this->hasColumn('state', 'integer', 1, array(
             'type' => 'integer',
             'unsigned' => true,
             'default' => 1,
             'notnull' => true,
             'length' => 1,
             ));

        $this->option('type', 'InnoDB');
        $this->option('charset', 'utf8');
        $this->option('collate', 'utf8_unicode_ci');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('PaymentListener as Listeners', array(
             'local' => 'id',
             'foreign' => 'payment_id'));

        $this->hasMany('FinancialTransaction as Transactions', array(
             'local' => 'id',
             'foreign' => 'payment_id'));

        $this->hasOne('PaymentData as DataContainer', array(
             'local' => 'id',
             'foreign' => 'payment_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}