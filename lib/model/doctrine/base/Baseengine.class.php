<?php

/**
 * Baseengine
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $id_category
 * @property integer $id_plateforme
 * @property integer $id_devise
 * @property string $site_display
 * @property string $site_url
 * @property string $html
 * @property string $logo
 * @property string $description
 * @property enum $remun_type
 * @property float $remun_min
 * @property float $remun_max
 * @property boolean $is_active
 * @property devise $devise
 * @property affiliatePlateforme $plateforme
 * @property category $category
 * @property Doctrine_Collection $engineTag
 * 
 * @method integer             getId()            Returns the current record's "id" value
 * @method integer             getIdCategory()    Returns the current record's "id_category" value
 * @method integer             getIdPlateforme()  Returns the current record's "id_plateforme" value
 * @method integer             getIdDevise()      Returns the current record's "id_devise" value
 * @method string              getSiteDisplay()   Returns the current record's "site_display" value
 * @method string              getSiteUrl()       Returns the current record's "site_url" value
 * @method string              getHtml()          Returns the current record's "html" value
 * @method string              getLogo()          Returns the current record's "logo" value
 * @method string              getDescription()   Returns the current record's "description" value
 * @method enum                getRemunType()     Returns the current record's "remun_type" value
 * @method float               getRemunMin()      Returns the current record's "remun_min" value
 * @method float               getRemunMax()      Returns the current record's "remun_max" value
 * @method boolean             getIsActive()      Returns the current record's "is_active" value
 * @method devise              getDevise()        Returns the current record's "devise" value
 * @method affiliatePlateforme getPlateforme()    Returns the current record's "plateforme" value
 * @method category            getCategory()      Returns the current record's "category" value
 * @method Doctrine_Collection getEngineTag()     Returns the current record's "engineTag" collection
 * @method engine              setId()            Sets the current record's "id" value
 * @method engine              setIdCategory()    Sets the current record's "id_category" value
 * @method engine              setIdPlateforme()  Sets the current record's "id_plateforme" value
 * @method engine              setIdDevise()      Sets the current record's "id_devise" value
 * @method engine              setSiteDisplay()   Sets the current record's "site_display" value
 * @method engine              setSiteUrl()       Sets the current record's "site_url" value
 * @method engine              setHtml()          Sets the current record's "html" value
 * @method engine              setLogo()          Sets the current record's "logo" value
 * @method engine              setDescription()   Sets the current record's "description" value
 * @method engine              setRemunType()     Sets the current record's "remun_type" value
 * @method engine              setRemunMin()      Sets the current record's "remun_min" value
 * @method engine              setRemunMax()      Sets the current record's "remun_max" value
 * @method engine              setIsActive()      Sets the current record's "is_active" value
 * @method engine              setDevise()        Sets the current record's "devise" value
 * @method engine              setPlateforme()    Sets the current record's "plateforme" value
 * @method engine              setCategory()      Sets the current record's "category" value
 * @method engine              setEngineTag()     Sets the current record's "engineTag" collection
 * 
 * @package    up2green
 * @subpackage model
 * @author     ClÃ©ment Gautier
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class Baseengine extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('engine');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('id_category', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => 4,
             ));
        $this->hasColumn('id_plateforme', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => 4,
             ));
        $this->hasColumn('id_devise', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => 4,
             ));
        $this->hasColumn('site_display', 'string', 128, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 128,
             ));
        $this->hasColumn('site_url', 'string', 128, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 128,
             ));
        $this->hasColumn('html', 'string', 128, array(
             'type' => 'string',
             'length' => 128,
             ));
        $this->hasColumn('logo', 'string', 128, array(
             'type' => 'string',
             'length' => 128,
             ));
        $this->hasColumn('description', 'string', 128, array(
             'type' => 'string',
             'length' => 128,
             ));
        $this->hasColumn('remun_type', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'number',
              1 => 'pourcent',
              2 => 'price',
             ),
             ));
        $this->hasColumn('remun_min', 'float', null, array(
             'type' => 'float',
             'notnull' => true,
             'default' => 0,
             ));
        $this->hasColumn('remun_max', 'float', null, array(
             'type' => 'float',
             'notnull' => true,
             ));
        $this->hasColumn('is_active', 'boolean', null, array(
             'type' => 'boolean',
             'default' => 1,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('devise', array(
             'local' => 'id_devise',
             'foreign' => 'id'));

        $this->hasOne('affiliatePlateforme as plateforme', array(
             'local' => 'id_plateforme',
             'foreign' => 'id'));

        $this->hasOne('category', array(
             'local' => 'id_category',
             'foreign' => 'id'));

        $this->hasMany('engineTag', array(
             'local' => 'id',
             'foreign' => 'engine_id'));

        $timestampable0 = new Doctrine_Template_Timestampable(array(
             ));
        $this->actAs($timestampable0);
    }
}