<?php

/**
 * BaselogPub
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property bigint $user_id
 * @property string $ip
 * @property clob $url
 * @property sfGuardUser $user
 * 
 * @method integer     getId()      Returns the current record's "id" value
 * @method bigint      getUserId()  Returns the current record's "user_id" value
 * @method string      getIp()      Returns the current record's "ip" value
 * @method clob        getUrl()     Returns the current record's "url" value
 * @method sfGuardUser getUser()    Returns the current record's "user" value
 * @method logPub      setId()      Sets the current record's "id" value
 * @method logPub      setUserId()  Sets the current record's "user_id" value
 * @method logPub      setIp()      Sets the current record's "ip" value
 * @method logPub      setUrl()     Sets the current record's "url" value
 * @method logPub      setUser()    Sets the current record's "user" value
 * 
 * @package    up2green
 * @subpackage model
 * @author     ClÃ©ment Gautier
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaselogPub extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('log_pub');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('user_id', 'bigint', 20, array(
             'type' => 'bigint',
             'length' => 20,
             ));
        $this->hasColumn('ip', 'string', 15, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 15,
             ));
        $this->hasColumn('url', 'clob', null, array(
             'type' => 'clob',
             'notnull' => true,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('sfGuardUser as user', array(
             'local' => 'user_id',
             'foreign' => 'id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}