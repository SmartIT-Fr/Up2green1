<?php

/**
 * Basenewsletter
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $category_id
 * @property string $unique_name
 * @property string $title
 * @property clob $content
 * @property string $reply_to
 * @property string $email_from
 * @property boolean $is_forced
 * @property timestamp $sent_at
 * @property category $category
 * 
 * @method integer    getId()          Returns the current record's "id" value
 * @method integer    getCategoryId()  Returns the current record's "category_id" value
 * @method string     getUniqueName()  Returns the current record's "unique_name" value
 * @method string     getTitle()       Returns the current record's "title" value
 * @method clob       getContent()     Returns the current record's "content" value
 * @method string     getReplyTo()     Returns the current record's "reply_to" value
 * @method string     getEmailFrom()   Returns the current record's "email_from" value
 * @method boolean    getIsForced()    Returns the current record's "is_forced" value
 * @method timestamp  getSentAt()      Returns the current record's "sent_at" value
 * @method category   getCategory()    Returns the current record's "category" value
 * @method newsletter setId()          Sets the current record's "id" value
 * @method newsletter setCategoryId()  Sets the current record's "category_id" value
 * @method newsletter setUniqueName()  Sets the current record's "unique_name" value
 * @method newsletter setTitle()       Sets the current record's "title" value
 * @method newsletter setContent()     Sets the current record's "content" value
 * @method newsletter setReplyTo()     Sets the current record's "reply_to" value
 * @method newsletter setEmailFrom()   Sets the current record's "email_from" value
 * @method newsletter setIsForced()    Sets the current record's "is_forced" value
 * @method newsletter setSentAt()      Sets the current record's "sent_at" value
 * @method newsletter setCategory()    Sets the current record's "category" value
 * 
 * @package    up2green
 * @subpackage model
 * @author     ClÃ©ment Gautier
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class Basenewsletter extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('newsletter');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('category_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             ));
        $this->hasColumn('unique_name', 'string', 30, array(
             'type' => 'string',
             'unique' => true,
             'length' => 30,
             ));
        $this->hasColumn('title', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('content', 'clob', 65535, array(
             'type' => 'clob',
             'length' => 65535,
             ));
        $this->hasColumn('reply_to', 'string', 128, array(
             'type' => 'string',
             'notnull' => true,
             'default' => 'noreply@up2green.com',
             'length' => 128,
             ));
        $this->hasColumn('email_from', 'string', 128, array(
             'type' => 'string',
             'notnull' => true,
             'default' => 'newsletter@up2green.com',
             'length' => 128,
             ));
        $this->hasColumn('is_forced', 'boolean', null, array(
             'type' => 'boolean',
             'default' => 0,
             ));
        $this->hasColumn('sent_at', 'timestamp', null, array(
             'type' => 'timestamp',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('category', array(
             'local' => 'category_id',
             'foreign' => 'id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $i18n0 = new Doctrine_Template_I18n(array(
             'fields' => 
             array(
              0 => 'title',
              1 => 'content',
             ),
             ));
        $sluggable1 = new Doctrine_Template_Sluggable(array(
             'fields' => 
             array(
              0 => 'title',
             ),
             'uniqueBy' => 
             array(
              0 => 'lang',
              1 => 'title',
             ),
             ));
        $i18n0->addChild($sluggable1);
        $this->actAs($timestampable0);
        $this->actAs($i18n0);
    }
}