<?php

/**
 * Baseprogramme
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $organisme_id
 * @property string $title
 * @property string $accroche
 * @property clob $description
 * @property string $geoadress
 * @property boolean $is_active
 * @property integer $max_tree
 * @property integer $add_tree
 * @property string $logo
 * @property organisme $Organisme
 * @property Doctrine_Collection $Polygonnes
 * @property programmePoint $Point
 * @property Doctrine_Collection $programmePolygonne
 * @property Doctrine_Collection $Trees
 * @property Doctrine_Collection $Partenaires
 * 
 * @method integer             getId()                 Returns the current record's "id" value
 * @method integer             getOrganismeId()        Returns the current record's "organisme_id" value
 * @method string              getTitle()              Returns the current record's "title" value
 * @method string              getAccroche()           Returns the current record's "accroche" value
 * @method clob                getDescription()        Returns the current record's "description" value
 * @method string              getGeoadress()          Returns the current record's "geoadress" value
 * @method boolean             getIsActive()           Returns the current record's "is_active" value
 * @method integer             getMaxTree()            Returns the current record's "max_tree" value
 * @method integer             getAddTree()            Returns the current record's "add_tree" value
 * @method string              getLogo()               Returns the current record's "logo" value
 * @method organisme           getOrganisme()          Returns the current record's "Organisme" value
 * @method Doctrine_Collection getPolygonnes()         Returns the current record's "Polygonnes" collection
 * @method programmePoint      getPoint()              Returns the current record's "Point" value
 * @method Doctrine_Collection getProgrammePolygonne() Returns the current record's "programmePolygonne" collection
 * @method Doctrine_Collection getTrees()              Returns the current record's "Trees" collection
 * @method Doctrine_Collection getPartenaires()        Returns the current record's "Partenaires" collection
 * @method programme           setId()                 Sets the current record's "id" value
 * @method programme           setOrganismeId()        Sets the current record's "organisme_id" value
 * @method programme           setTitle()              Sets the current record's "title" value
 * @method programme           setAccroche()           Sets the current record's "accroche" value
 * @method programme           setDescription()        Sets the current record's "description" value
 * @method programme           setGeoadress()          Sets the current record's "geoadress" value
 * @method programme           setIsActive()           Sets the current record's "is_active" value
 * @method programme           setMaxTree()            Sets the current record's "max_tree" value
 * @method programme           setAddTree()            Sets the current record's "add_tree" value
 * @method programme           setLogo()               Sets the current record's "logo" value
 * @method programme           setOrganisme()          Sets the current record's "Organisme" value
 * @method programme           setPolygonnes()         Sets the current record's "Polygonnes" collection
 * @method programme           setPoint()              Sets the current record's "Point" value
 * @method programme           setProgrammePolygonne() Sets the current record's "programmePolygonne" collection
 * @method programme           setTrees()              Sets the current record's "Trees" collection
 * @method programme           setPartenaires()        Sets the current record's "Partenaires" collection
 * 
 * @package    up2green
 * @subpackage model
 * @author     ClÃ©ment Gautier
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class Baseprogramme extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('programme');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('organisme_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             ));
        $this->hasColumn('title', 'string', 128, array(
             'type' => 'string',
             'length' => 128,
             ));
        $this->hasColumn('accroche', 'string', 1000, array(
             'type' => 'string',
             'length' => 1000,
             ));
        $this->hasColumn('description', 'clob', 65535, array(
             'type' => 'clob',
             'length' => 65535,
             ));
        $this->hasColumn('geoadress', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('is_active', 'boolean', null, array(
             'type' => 'boolean',
             'default' => 1,
             ));
        $this->hasColumn('max_tree', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => 4,
             ));
        $this->hasColumn('add_tree', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => true,
             'default' => 0,
             'length' => 4,
             ));
        $this->hasColumn('logo', 'string', 128, array(
             'type' => 'string',
             'length' => 128,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('organisme as Organisme', array(
             'local' => 'organisme_id',
             'foreign' => 'id'));

        $this->hasMany('polygonne as Polygonnes', array(
             'refClass' => 'programmePolygonne',
             'local' => 'programme_id',
             'foreign' => 'polygonne_id'));

        $this->hasOne('programmePoint as Point', array(
             'local' => 'id',
             'foreign' => 'programme_id'));

        $this->hasMany('programmePolygonne', array(
             'local' => 'id',
             'foreign' => 'programme_id'));

        $this->hasMany('tree as Trees', array(
             'local' => 'id',
             'foreign' => 'programme_id'));

        $this->hasMany('partenaireProgramme as Partenaires', array(
             'local' => 'id',
             'foreign' => 'programme_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $i18n0 = new Doctrine_Template_I18n(array(
             'fields' => 
             array(
              0 => 'title',
              1 => 'accroche',
              2 => 'description',
             ),
             ));
        $sluggable1 = new Doctrine_Template_Sluggable(array(
             'fields' => 
             array(
              0 => 'title',
             ),
             'uniqueBy' => 
             array(
              0 => 'lang',
              1 => 'title',
             ),
             ));
        $i18n0->addChild($sluggable1);
        $this->actAs($timestampable0);
        $this->actAs($i18n0);
    }
}