CREATE TABLE currency_version (id BIGINT UNSIGNED, code VARCHAR(3) NOT NULL, rate DECIMAL(18, 7) COMMENT 'This rate is relative to the euro; basically it says what amount 1 EUR equals in this currency.', updated_at DATETIME NOT NULL, version BIGINT, PRIMARY KEY(id, version)) DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci ENGINE = InnoDB;
CREATE TABLE currencies (id BIGINT UNSIGNED AUTO_INCREMENT, code VARCHAR(3) NOT NULL UNIQUE, rate DECIMAL(18, 7) COMMENT 'This rate is relative to the euro; basically it says what amount 1 EUR equals in this currency.', updated_at DATETIME NOT NULL, version BIGINT, PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci ENGINE = InnoDB;
CREATE TABLE financial_transactions (id BIGINT UNSIGNED AUTO_INCREMENT, type VARCHAR(25) NOT NULL, payment_id BIGINT UNSIGNED NOT NULL, currency VARCHAR(255) DEFAULT 'EUR' COMMENT 'This might be different from the currency of the payment; by default, both are equal.', requested_amount DECIMAL(18, 5), processed_amount DECIMAL(18, 5), state TINYINT UNSIGNED DEFAULT 1 NOT NULL, response_code VARCHAR(255) COMMENT 'Primary error code that is used to determine whether a transaction was successful or not.', reason_code VARCHAR(255) COMMENT 'Secondary error code that is used to determine what exactly went wrong if anything.', created_at DATETIME NOT NULL, updated_at DATETIME NOT NULL, INDEX payment_id_idx (payment_id), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci ENGINE = InnoDB;
CREATE TABLE financial_transactions (id BIGINT UNSIGNED AUTO_INCREMENT, type VARCHAR(25) NOT NULL, payment_id BIGINT UNSIGNED NOT NULL, currency VARCHAR(255) DEFAULT 'EUR' COMMENT 'This might be different from the currency of the payment; by default, both are equal.', requested_amount DECIMAL(18, 5), processed_amount DECIMAL(18, 5), state TINYINT UNSIGNED DEFAULT 1 NOT NULL, response_code VARCHAR(255) COMMENT 'Primary error code that is used to determine whether a transaction was successful or not.', reason_code VARCHAR(255) COMMENT 'Secondary error code that is used to determine what exactly went wrong if anything.', created_at DATETIME NOT NULL, updated_at DATETIME NOT NULL, INDEX financial_transactions_type_idx (type), INDEX payment_id_idx (payment_id), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci ENGINE = InnoDB;
CREATE TABLE payment_data (payment_id BIGINT UNSIGNED, method_class_name VARCHAR(100) NOT NULL COMMENT 'The class name of the payment method that this data represents.', subject VARCHAR(255) NOT NULL COMMENT 'The subject that is displayed to the client in the given locale.', internal_reference_number VARCHAR(255) COMMENT 'This is purely optional, and can be used by the payment method class internally (e.g. PayPalPaymentMethod).', external_reference_number VARCHAR(255) COMMENT 'This is a reference number generated by the actual payment method provider (e.g. PayPal itself).', bank_country VARCHAR(2) NOT NULL, bank_code VARCHAR(255) NOT NULL, account_holder VARCHAR(255) NOT NULL, account_number VARCHAR(255) NOT NULL, project VARCHAR(255), project_campaign VARCHAR(255), payment_text VARCHAR(255), ip VARCHAR(15), express_token VARCHAR(30), express_url TEXT, cancel_url TEXT NOT NULL, return_url TEXT NOT NULL, payer_id VARCHAR(255), created_at DATETIME NOT NULL, updated_at DATETIME NOT NULL, PRIMARY KEY(payment_id)) DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci ENGINE = InnoDB;
CREATE TABLE payments (id BIGINT UNSIGNED AUTO_INCREMENT, target_amount DECIMAL(18, 5) NOT NULL COMMENT 'The requested target amount for this Payment.', approved_amount DECIMAL(18, 5) NOT NULL, approving_amount DECIMAL(18, 5) NOT NULL, deposited_amount DECIMAL(18, 5) NOT NULL, depositing_amount DECIMAL(18, 5) NOT NULL, currency VARCHAR(255) DEFAULT 'EUR' NOT NULL, state TINYINT UNSIGNED DEFAULT 1 NOT NULL, created_at DATETIME NOT NULL, updated_at DATETIME NOT NULL, PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci ENGINE = InnoDB;
CREATE TABLE payment_data (payment_id BIGINT UNSIGNED, method_class_name VARCHAR(100) NOT NULL COMMENT 'The class name of the payment method that this data represents.', subject VARCHAR(255) NOT NULL COMMENT 'The subject that is displayed to the client in the given locale.', internal_reference_number VARCHAR(255) COMMENT 'This is purely optional, and can be used by the payment method class internally (e.g. PayPalPaymentMethod).', external_reference_number VARCHAR(255) COMMENT 'This is a reference number generated by the actual payment method provider (e.g. PayPal itself).', bank_country VARCHAR(2) NOT NULL, bank_code VARCHAR(255) NOT NULL, account_holder VARCHAR(255) NOT NULL, account_number VARCHAR(255) NOT NULL, project VARCHAR(255), project_campaign VARCHAR(255), payment_text VARCHAR(255), ip VARCHAR(15), express_token VARCHAR(30), express_url TEXT, cancel_url TEXT NOT NULL, return_url TEXT NOT NULL, payer_id VARCHAR(255), created_at DATETIME NOT NULL, updated_at DATETIME NOT NULL, INDEX payment_data_method_class_name_idx (method_class_name), PRIMARY KEY(payment_id)) DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci ENGINE = InnoDB;
CREATE TABLE payment_listeners (payment_id BIGINT UNSIGNED, listener_id VARCHAR(115), listener_type VARCHAR(115), PRIMARY KEY(payment_id, listener_id, listener_type)) COMMENT = 'This holds the listeners that are registered on specific payments.' DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci ENGINE = InnoDB;
CREATE TABLE affiliate_plateforme (id INT AUTO_INCREMENT, unique_name VARCHAR(30) UNIQUE, created_at DATETIME NOT NULL, updated_at DATETIME NOT NULL, PRIMARY KEY(id)) ENGINE = INNODB;
CREATE TABLE article_translation (id INT, title VARCHAR(255) NOT NULL, accroche TEXT, description MEDIUMTEXT, lang CHAR(2), slug VARCHAR(255), UNIQUE INDEX article_translation_sluggable_idx (slug, lang, title), PRIMARY KEY(id, lang)) ENGINE = INNODB;
CREATE TABLE article (id INT AUTO_INCREMENT, category_id INT, logo VARCHAR(255), is_active TINYINT(1) DEFAULT '0', rank INT DEFAULT 1 NOT NULL, created_at DATETIME NOT NULL, updated_at DATETIME NOT NULL, INDEX category_id_idx (category_id), PRIMARY KEY(id)) ENGINE = INNODB;
CREATE TABLE category (id INT AUTO_INCREMENT, unique_name VARCHAR(30) UNIQUE, rank INT DEFAULT 1 NOT NULL, is_active TINYINT(1) DEFAULT '1', root_id BIGINT, lft INT, rgt INT, level SMALLINT, PRIMARY KEY(id)) ENGINE = INNODB;
CREATE TABLE content (id INT AUTO_INCREMENT, layout_id INT, zone_id INT, module_id INT, created_at DATETIME NOT NULL, updated_at DATETIME NOT NULL, PRIMARY KEY(id, layout_id, zone_id, module_id)) ENGINE = INNODB;
CREATE TABLE coupon (id INT AUTO_INCREMENT, gen_id INT NOT NULL, code VARCHAR(128) NOT NULL UNIQUE, is_active TINYINT(1) DEFAULT '1', used_at DATETIME, used_by INT, created_at DATETIME NOT NULL, updated_at DATETIME NOT NULL, INDEX gen_id_idx (gen_id), PRIMARY KEY(id)) ENGINE = INNODB;
CREATE TABLE coupon_gen (id INT AUTO_INCREMENT, prix FLOAT(18, 2) NOT NULL, credit INT NOT NULL, is_purchasable TINYINT(1) DEFAULT '1', is_partenaire_only TINYINT(1) DEFAULT '0', created_at DATETIME NOT NULL, updated_at DATETIME NOT NULL, PRIMARY KEY(id)) ENGINE = INNODB;
CREATE TABLE coupon_partenaire (coupon_id INT, partenaire_id INT, PRIMARY KEY(coupon_id, partenaire_id)) ENGINE = INNODB;
CREATE TABLE coupon_user (coupon_id INT, user_id bigint(20), PRIMARY KEY(coupon_id, user_id)) ENGINE = INNODB;
CREATE TABLE engine (id INT AUTO_INCREMENT, id_category INT NOT NULL, id_plateforme INT NOT NULL, currency_id BIGINT UNSIGNED DEFAULT 34 NOT NULL, site_display VARCHAR(128) NOT NULL, site_url VARCHAR(128) NOT NULL, html LONGTEXT, logo LONGTEXT, description LONGTEXT, remun_type VARCHAR(255) DEFAULT 'number', remun_min FLOAT(18, 2) DEFAULT 0 NOT NULL, remun_max FLOAT(18, 2) NOT NULL, safe_search_only TINYINT(1) DEFAULT '0', is_active TINYINT(1) DEFAULT '1', created_at DATETIME NOT NULL, updated_at DATETIME NOT NULL, INDEX currency_id_idx (currency_id), INDEX id_plateforme_idx (id_plateforme), INDEX id_category_idx (id_category), PRIMARY KEY(id)) ENGINE = INNODB;
CREATE TABLE engine_tag (engine_id INT, tag_id INT, PRIMARY KEY(engine_id, tag_id)) ENGINE = INNODB;
CREATE TABLE filleul (id BIGINT AUTO_INCREMENT, user_id bigint(20) NOT NULL, filleul_id bigint(20) UNIQUE, email_address VARCHAR(255) NOT NULL UNIQUE, created_at DATETIME NOT NULL, updated_at DATETIME NOT NULL, INDEX user_id_idx (user_id), INDEX filleul_id_idx (filleul_id), PRIMARY KEY(id)) ENGINE = INNODB;
CREATE TABLE layout (id INT AUTO_INCREMENT, name VARCHAR(128) NOT NULL, unique_name VARCHAR(128) NOT NULL UNIQUE, created_at DATETIME NOT NULL, updated_at DATETIME NOT NULL, PRIMARY KEY(id)) ENGINE = INNODB;
CREATE TABLE lien_translation (id INT, title VARCHAR(255) NOT NULL, lang CHAR(2), slug VARCHAR(255), UNIQUE INDEX lien_translation_sluggable_idx (slug, lang, title), PRIMARY KEY(id, lang)) ENGINE = INNODB;
CREATE TABLE lien (id INT AUTO_INCREMENT, category_id INT, src VARCHAR(255), is_active TINYINT(1) DEFAULT '0', rank INT DEFAULT 1 NOT NULL, created_at DATETIME NOT NULL, updated_at DATETIME NOT NULL, INDEX category_id_idx (category_id), PRIMARY KEY(id)) ENGINE = INNODB;
CREATE TABLE log_coupon (id INT AUTO_INCREMENT, ip VARCHAR(15) NOT NULL, email VARCHAR(50), coupon_id INT UNIQUE NOT NULL, created_at DATETIME NOT NULL, updated_at DATETIME NOT NULL, INDEX coupon_id_idx (coupon_id), PRIMARY KEY(id)) ENGINE = INNODB;
CREATE TABLE log_pub (id INT AUTO_INCREMENT, user_id bigint(20), ip VARCHAR(15) NOT NULL, url LONGTEXT NOT NULL, created_at DATETIME NOT NULL, updated_at DATETIME NOT NULL, INDEX user_id_idx (user_id), PRIMARY KEY(id)) ENGINE = INNODB;
CREATE TABLE module (id INT AUTO_INCREMENT, content_id VARCHAR(128) NOT NULL, content_type VARCHAR(255), is_active TINYINT(1) DEFAULT '0', action VARCHAR(128), user_access VARCHAR(128), created_at DATETIME NOT NULL, updated_at DATETIME NOT NULL, PRIMARY KEY(id)) ENGINE = INNODB;
CREATE TABLE newsletter_translation (id INT, title VARCHAR(255) NOT NULL, content MEDIUMTEXT, lang CHAR(2), slug VARCHAR(255), UNIQUE INDEX newsletter_translation_sluggable_idx (slug, lang, title), PRIMARY KEY(id, lang)) ENGINE = INNODB;
CREATE TABLE newsletter (id INT AUTO_INCREMENT, category_id INT, reply_to VARCHAR(128) DEFAULT 'noreply@up2green.com' NOT NULL, email_from VARCHAR(128) DEFAULT 'newsletter@up2green.com' NOT NULL, is_forced TINYINT(1) DEFAULT '0', sent_at DATETIME, created_at DATETIME NOT NULL, updated_at DATETIME NOT NULL, INDEX category_id_idx (category_id), PRIMARY KEY(id)) ENGINE = INNODB;
CREATE TABLE organisme_translation (id INT, title VARCHAR(128), accroche TEXT, description MEDIUMTEXT, lang CHAR(2), slug VARCHAR(255), UNIQUE INDEX organisme_translation_sluggable_idx (slug, lang, title), PRIMARY KEY(id, lang)) ENGINE = INNODB;
CREATE TABLE organisme (id INT AUTO_INCREMENT, url VARCHAR(128), logo VARCHAR(128), is_active TINYINT(1) DEFAULT '1', created_at DATETIME NOT NULL, updated_at DATETIME NOT NULL, PRIMARY KEY(id)) ENGINE = INNODB;
CREATE TABLE organisme_point (id INT AUTO_INCREMENT, latitude DECIMAL(18, 6) NOT NULL, longitude DECIMAL(18, 6) NOT NULL, altitude DECIMAL(18, 6) NOT NULL, organisme_id INT, PRIMARY KEY(id, organisme_id)) ENGINE = INNODB;
CREATE TABLE partenaire (id INT AUTO_INCREMENT, user_id bigint(20) NOT NULL UNIQUE, logo VARCHAR(128), title VARCHAR(45), accroche TEXT, description MEDIUMTEXT, page MEDIUMTEXT, attestation VARCHAR(128), url VARCHAR(150), created_at DATETIME NOT NULL, updated_at DATETIME NOT NULL, INDEX user_id_idx (user_id), PRIMARY KEY(id)) ENGINE = INNODB;
CREATE TABLE partenaire_programme (partenaire_id INT, programme_id INT, number BIGINT DEFAULT 0 NOT NULL, PRIMARY KEY(partenaire_id, programme_id)) ENGINE = INNODB;
CREATE TABLE point (id INT AUTO_INCREMENT, latitude DECIMAL(18, 6) NOT NULL, longitude DECIMAL(18, 6) NOT NULL, altitude DECIMAL(18, 6) NOT NULL, PRIMARY KEY(id)) ENGINE = INNODB;
CREATE TABLE polygonne (id INT AUTO_INCREMENT, unique_name VARCHAR(30) NOT NULL UNIQUE, PRIMARY KEY(id)) ENGINE = INNODB;
CREATE TABLE polygonne_point (id INT AUTO_INCREMENT, latitude DECIMAL(18, 6) NOT NULL, longitude DECIMAL(18, 6) NOT NULL, altitude DECIMAL(18, 6) NOT NULL, polygonne_id INT, PRIMARY KEY(id, polygonne_id)) ENGINE = INNODB;
CREATE TABLE preinscription (id BIGINT AUTO_INCREMENT, first_name VARCHAR(255), last_name VARCHAR(255), email_address VARCHAR(255) NOT NULL UNIQUE, username VARCHAR(128) NOT NULL UNIQUE, PRIMARY KEY(id)) ENGINE = INNODB;
CREATE TABLE profil (id INT AUTO_INCREMENT, user_id bigint(20) NOT NULL UNIQUE, credit FLOAT(18, 4) DEFAULT 0 NOT NULL, is_newsletter TINYINT DEFAULT 0 NOT NULL, culture VARCHAR(7) DEFAULT 'fr_FR', INDEX user_id_idx (user_id), PRIMARY KEY(id)) ENGINE = INNODB;
CREATE TABLE programme_translation (id INT, title VARCHAR(128), accroche TEXT, description MEDIUMTEXT, lang CHAR(2), slug VARCHAR(255), UNIQUE INDEX programme_translation_sluggable_idx (slug, lang, title), PRIMARY KEY(id, lang)) ENGINE = INNODB;
CREATE TABLE programme (id INT AUTO_INCREMENT, organisme_id INT, geoadress VARCHAR(255), is_active TINYINT(1) DEFAULT '1', max_tree INT NOT NULL, add_tree INT DEFAULT 0 NOT NULL, logo VARCHAR(128), created_at DATETIME NOT NULL, updated_at DATETIME NOT NULL, INDEX organisme_id_idx (organisme_id), PRIMARY KEY(id)) ENGINE = INNODB;
CREATE TABLE programme_point (id INT AUTO_INCREMENT, latitude DECIMAL(18, 6) NOT NULL, longitude DECIMAL(18, 6) NOT NULL, altitude DECIMAL(18, 6) NOT NULL, programme_id INT, PRIMARY KEY(id, programme_id)) ENGINE = INNODB;
CREATE TABLE programme_polygonne (polygonne_id INT, programme_id INT, PRIMARY KEY(polygonne_id, programme_id)) ENGINE = INNODB;
CREATE TABLE session (sess_id VARCHAR(64), sess_data TEXT NOT NULL, sess_time INT NOT NULL, is_authenticated TINYINT(1) DEFAULT '0', last_request_time INT, user_id INT, app VARCHAR(255), module VARCHAR(255), action VARCHAR(255), is_ajax TINYINT(1) DEFAULT '0', ip VARCHAR(255), culture VARCHAR(255), user_agent VARCHAR(255), PRIMARY KEY(sess_id)) ENGINE = INNODB;
CREATE TABLE sf_guard_forgot_password (id BIGINT AUTO_INCREMENT, user_id BIGINT NOT NULL, unique_key VARCHAR(255), expires_at DATETIME NOT NULL, created_at DATETIME NOT NULL, updated_at DATETIME NOT NULL, INDEX user_id_idx (user_id), PRIMARY KEY(id)) ENGINE = INNODB;
CREATE TABLE sf_guard_group (id BIGINT AUTO_INCREMENT, name VARCHAR(255) UNIQUE, description TEXT, created_at DATETIME NOT NULL, updated_at DATETIME NOT NULL, PRIMARY KEY(id)) ENGINE = INNODB;
CREATE TABLE sf_guard_group_permission (group_id BIGINT, permission_id BIGINT, created_at DATETIME NOT NULL, updated_at DATETIME NOT NULL, PRIMARY KEY(group_id, permission_id)) ENGINE = INNODB;
CREATE TABLE sf_guard_permission (id BIGINT AUTO_INCREMENT, name VARCHAR(255) UNIQUE, description TEXT, created_at DATETIME NOT NULL, updated_at DATETIME NOT NULL, PRIMARY KEY(id)) ENGINE = INNODB;
CREATE TABLE sf_guard_remember_key (id BIGINT AUTO_INCREMENT, user_id BIGINT, remember_key VARCHAR(32), ip_address VARCHAR(50), created_at DATETIME NOT NULL, updated_at DATETIME NOT NULL, INDEX user_id_idx (user_id), PRIMARY KEY(id)) ENGINE = INNODB;
CREATE TABLE sf_guard_user (id BIGINT AUTO_INCREMENT, first_name VARCHAR(255), last_name VARCHAR(255), email_address VARCHAR(255) NOT NULL UNIQUE, username VARCHAR(128) NOT NULL UNIQUE, algorithm VARCHAR(128) DEFAULT 'sha1' NOT NULL, salt VARCHAR(128), password VARCHAR(128), is_active TINYINT(1) DEFAULT '1', is_super_admin TINYINT(1) DEFAULT '0', last_login DATETIME, created_at DATETIME NOT NULL, updated_at DATETIME NOT NULL, INDEX is_active_idx_idx (is_active), PRIMARY KEY(id)) ENGINE = INNODB;
CREATE TABLE sf_guard_user_group (user_id BIGINT, group_id BIGINT, created_at DATETIME NOT NULL, updated_at DATETIME NOT NULL, PRIMARY KEY(user_id, group_id)) ENGINE = INNODB;
CREATE TABLE sf_guard_user_permission (user_id BIGINT, permission_id BIGINT, created_at DATETIME NOT NULL, updated_at DATETIME NOT NULL, PRIMARY KEY(user_id, permission_id)) ENGINE = INNODB;
CREATE TABLE tag (id INT AUTO_INCREMENT, label VARCHAR(255) NOT NULL UNIQUE, rank INT DEFAULT 0 NOT NULL, is_active TINYINT(1) DEFAULT '1', created_at DATETIME NOT NULL, updated_at DATETIME NOT NULL, PRIMARY KEY(id)) ENGINE = INNODB;
CREATE TABLE tree (id INT AUTO_INCREMENT, programme_id INT NOT NULL, created_at DATETIME NOT NULL, updated_at DATETIME NOT NULL, INDEX programme_id_idx (programme_id), PRIMARY KEY(id)) ENGINE = INNODB;
CREATE TABLE tree_coupon (tree_id INT, coupon_id INT, PRIMARY KEY(tree_id, coupon_id)) ENGINE = INNODB;
CREATE TABLE tree_user (tree_id INT, user_id bigint(20), PRIMARY KEY(tree_id, user_id)) ENGINE = INNODB;
CREATE TABLE zone (id INT AUTO_INCREMENT, name VARCHAR(128) NOT NULL, unique_name VARCHAR(128) NOT NULL UNIQUE, created_at DATETIME NOT NULL, updated_at DATETIME NOT NULL, PRIMARY KEY(id)) ENGINE = INNODB;
ALTER TABLE currency_version ADD CONSTRAINT currency_version_id_currencies_id FOREIGN KEY (id) REFERENCES currencies(id) ON UPDATE CASCADE ON DELETE CASCADE;
ALTER TABLE financial_transactions ADD CONSTRAINT financial_transactions_payment_id_payments_id FOREIGN KEY (payment_id) REFERENCES payments(id);
ALTER TABLE payment_listeners ADD CONSTRAINT payment_listeners_payment_id_payments_id FOREIGN KEY (payment_id) REFERENCES payments(id);
ALTER TABLE article_translation ADD CONSTRAINT article_translation_id_article_id FOREIGN KEY (id) REFERENCES article(id) ON UPDATE CASCADE ON DELETE CASCADE;
ALTER TABLE article ADD CONSTRAINT article_category_id_category_id FOREIGN KEY (category_id) REFERENCES category(id);
ALTER TABLE content ADD CONSTRAINT content_zone_id_zone_id FOREIGN KEY (zone_id) REFERENCES zone(id);
ALTER TABLE content ADD CONSTRAINT content_module_id_module_id FOREIGN KEY (module_id) REFERENCES module(id) ON DELETE CASCADE;
ALTER TABLE content ADD CONSTRAINT content_layout_id_layout_id FOREIGN KEY (layout_id) REFERENCES layout(id);
ALTER TABLE coupon ADD CONSTRAINT coupon_gen_id_coupon_gen_id FOREIGN KEY (gen_id) REFERENCES coupon_gen(id);
ALTER TABLE coupon_partenaire ADD CONSTRAINT coupon_partenaire_partenaire_id_partenaire_id FOREIGN KEY (partenaire_id) REFERENCES partenaire(id);
ALTER TABLE coupon_partenaire ADD CONSTRAINT coupon_partenaire_coupon_id_coupon_id FOREIGN KEY (coupon_id) REFERENCES coupon(id) ON DELETE CASCADE;
ALTER TABLE coupon_user ADD CONSTRAINT coupon_user_user_id_sf_guard_user_id FOREIGN KEY (user_id) REFERENCES sf_guard_user(id);
ALTER TABLE coupon_user ADD CONSTRAINT coupon_user_coupon_id_coupon_id FOREIGN KEY (coupon_id) REFERENCES coupon(id) ON DELETE CASCADE;
ALTER TABLE engine ADD CONSTRAINT engine_id_plateforme_affiliate_plateforme_id FOREIGN KEY (id_plateforme) REFERENCES affiliate_plateforme(id);
ALTER TABLE engine ADD CONSTRAINT engine_id_category_category_id FOREIGN KEY (id_category) REFERENCES category(id);
ALTER TABLE engine ADD CONSTRAINT engine_currency_id_currencies_id FOREIGN KEY (currency_id) REFERENCES currencies(id);
ALTER TABLE engine_tag ADD CONSTRAINT engine_tag_tag_id_tag_id FOREIGN KEY (tag_id) REFERENCES tag(id) ON DELETE CASCADE;
ALTER TABLE engine_tag ADD CONSTRAINT engine_tag_engine_id_engine_id FOREIGN KEY (engine_id) REFERENCES engine(id) ON DELETE CASCADE;
ALTER TABLE filleul ADD CONSTRAINT filleul_user_id_sf_guard_user_id FOREIGN KEY (user_id) REFERENCES sf_guard_user(id) ON DELETE CASCADE;
ALTER TABLE filleul ADD CONSTRAINT filleul_filleul_id_sf_guard_user_id FOREIGN KEY (filleul_id) REFERENCES sf_guard_user(id);
ALTER TABLE lien_translation ADD CONSTRAINT lien_translation_id_lien_id FOREIGN KEY (id) REFERENCES lien(id) ON UPDATE CASCADE ON DELETE CASCADE;
ALTER TABLE lien ADD CONSTRAINT lien_category_id_category_id FOREIGN KEY (category_id) REFERENCES category(id);
ALTER TABLE log_coupon ADD CONSTRAINT log_coupon_coupon_id_coupon_id FOREIGN KEY (coupon_id) REFERENCES coupon(id);
ALTER TABLE log_pub ADD CONSTRAINT log_pub_user_id_sf_guard_user_id FOREIGN KEY (user_id) REFERENCES sf_guard_user(id);
ALTER TABLE newsletter_translation ADD CONSTRAINT newsletter_translation_id_newsletter_id FOREIGN KEY (id) REFERENCES newsletter(id) ON UPDATE CASCADE ON DELETE CASCADE;
ALTER TABLE newsletter ADD CONSTRAINT newsletter_category_id_category_id FOREIGN KEY (category_id) REFERENCES category(id);
ALTER TABLE organisme_translation ADD CONSTRAINT organisme_translation_id_organisme_id FOREIGN KEY (id) REFERENCES organisme(id) ON UPDATE CASCADE ON DELETE CASCADE;
ALTER TABLE organisme_point ADD CONSTRAINT organisme_point_organisme_id_organisme_id FOREIGN KEY (organisme_id) REFERENCES organisme(id) ON DELETE CASCADE;
ALTER TABLE partenaire ADD CONSTRAINT partenaire_user_id_sf_guard_user_id FOREIGN KEY (user_id) REFERENCES sf_guard_user(id) ON DELETE CASCADE;
ALTER TABLE partenaire_programme ADD CONSTRAINT partenaire_programme_programme_id_programme_id FOREIGN KEY (programme_id) REFERENCES programme(id) ON DELETE CASCADE;
ALTER TABLE partenaire_programme ADD CONSTRAINT partenaire_programme_partenaire_id_partenaire_id FOREIGN KEY (partenaire_id) REFERENCES partenaire(id) ON DELETE CASCADE;
ALTER TABLE polygonne_point ADD CONSTRAINT polygonne_point_polygonne_id_polygonne_id FOREIGN KEY (polygonne_id) REFERENCES polygonne(id) ON DELETE CASCADE;
ALTER TABLE profil ADD CONSTRAINT profil_user_id_sf_guard_user_id FOREIGN KEY (user_id) REFERENCES sf_guard_user(id) ON DELETE CASCADE;
ALTER TABLE programme_translation ADD CONSTRAINT programme_translation_id_programme_id FOREIGN KEY (id) REFERENCES programme(id) ON UPDATE CASCADE ON DELETE CASCADE;
ALTER TABLE programme ADD CONSTRAINT programme_organisme_id_organisme_id FOREIGN KEY (organisme_id) REFERENCES organisme(id);
ALTER TABLE programme_point ADD CONSTRAINT programme_point_programme_id_programme_id FOREIGN KEY (programme_id) REFERENCES programme(id) ON DELETE CASCADE;
ALTER TABLE programme_polygonne ADD CONSTRAINT programme_polygonne_programme_id_programme_id FOREIGN KEY (programme_id) REFERENCES programme(id) ON DELETE CASCADE;
ALTER TABLE programme_polygonne ADD CONSTRAINT programme_polygonne_polygonne_id_polygonne_id FOREIGN KEY (polygonne_id) REFERENCES polygonne(id) ON DELETE CASCADE;
ALTER TABLE sf_guard_forgot_password ADD CONSTRAINT sf_guard_forgot_password_user_id_sf_guard_user_id FOREIGN KEY (user_id) REFERENCES sf_guard_user(id) ON DELETE CASCADE;
ALTER TABLE sf_guard_group_permission ADD CONSTRAINT sf_guard_group_permission_permission_id_sf_guard_permission_id FOREIGN KEY (permission_id) REFERENCES sf_guard_permission(id) ON DELETE CASCADE;
ALTER TABLE sf_guard_group_permission ADD CONSTRAINT sf_guard_group_permission_group_id_sf_guard_group_id FOREIGN KEY (group_id) REFERENCES sf_guard_group(id) ON DELETE CASCADE;
ALTER TABLE sf_guard_remember_key ADD CONSTRAINT sf_guard_remember_key_user_id_sf_guard_user_id FOREIGN KEY (user_id) REFERENCES sf_guard_user(id) ON DELETE CASCADE;
ALTER TABLE sf_guard_user_group ADD CONSTRAINT sf_guard_user_group_user_id_sf_guard_user_id FOREIGN KEY (user_id) REFERENCES sf_guard_user(id) ON DELETE CASCADE;
ALTER TABLE sf_guard_user_group ADD CONSTRAINT sf_guard_user_group_group_id_sf_guard_group_id FOREIGN KEY (group_id) REFERENCES sf_guard_group(id) ON DELETE CASCADE;
ALTER TABLE sf_guard_user_permission ADD CONSTRAINT sf_guard_user_permission_user_id_sf_guard_user_id FOREIGN KEY (user_id) REFERENCES sf_guard_user(id) ON DELETE CASCADE;
ALTER TABLE sf_guard_user_permission ADD CONSTRAINT sf_guard_user_permission_permission_id_sf_guard_permission_id FOREIGN KEY (permission_id) REFERENCES sf_guard_permission(id) ON DELETE CASCADE;
ALTER TABLE tree ADD CONSTRAINT tree_programme_id_programme_id FOREIGN KEY (programme_id) REFERENCES programme(id);
ALTER TABLE tree_coupon ADD CONSTRAINT tree_coupon_tree_id_tree_id FOREIGN KEY (tree_id) REFERENCES tree(id) ON DELETE CASCADE;
ALTER TABLE tree_coupon ADD CONSTRAINT tree_coupon_coupon_id_coupon_id FOREIGN KEY (coupon_id) REFERENCES coupon(id);
ALTER TABLE tree_user ADD CONSTRAINT tree_user_user_id_sf_guard_user_id FOREIGN KEY (user_id) REFERENCES sf_guard_user(id);
ALTER TABLE tree_user ADD CONSTRAINT tree_user_tree_id_tree_id FOREIGN KEY (tree_id) REFERENCES tree(id) ON DELETE CASCADE;
